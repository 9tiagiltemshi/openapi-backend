{
  "openapi": "3.0.0.",
  "info": {
    "title": "Example CRUD Pet API",
    "description": "Example CRUD API to demonstrate auto-generated openapi docs with Joi",
    "version": "0.1.0"
  },
  "security": [
    {
      "ApiKey": []
    }
  ],
  "tags": [
    {
      "name": "pets",
      "description": "Pet operations"
    }
  ],
  "paths": {
    "/pets": {
      "get": {
        "operationId": "getPets",
        "summary": "List pets",
        "description": "Returns all pets in database",
        "tags": [
          "pets"
        ],
        "responses": {
          "200": {
            "description": "List of pets in database"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/QueryLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Starting offset for returning items",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/QueryOffset"
            }
          }
        ]
      },
      "post": {
        "operationId": "createPet",
        "summary": "Create pet",
        "description": "Crete a new pet into the database",
        "tags": [
          "pets"
        ],
        "responses": {
          "201": {
            "description": "Pet created succesfully"
          }
        },
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreatePetPayload"
        }
      }
    },
    "/pets/{id}": {
      "get": {
        "operationId": "getPetById",
        "summary": "Get a pet by its id",
        "description": "Returns a pet by its id in database",
        "tags": [
          "pets"
        ],
        "responses": {
          "200": {
            "description": "Pet object corresponding to id"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for pet in database",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PetId"
            }
          }
        ]
      },
      "patch": {
        "operationId": "updatePetById",
        "summary": "Update pet",
        "description": "Update an existing pet in the database",
        "tags": [
          "pets"
        ],
        "responses": {
          "200": {
            "description": "Pet updated succesfully"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for pet in database",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PetId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdatePetByIdPayload"
        }
      },
      "delete": {
        "operationId": "deletePetById",
        "summary": "Delete a pet by its id",
        "description": "Deletes a pet by its id in database",
        "tags": [
          "pets"
        ],
        "responses": {
          "200": {
            "description": "Pet deleted succesfully"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for pet in database",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PetId"
            }
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "QueryLimit": {
        "description": "Number of items to return",
        "example": 25,
        "title": "QueryLimit",
        "type": "integer"
      },
      "QueryOffset": {
        "description": "Starting offset for returning items",
        "example": 0,
        "title": "QueryOffset",
        "type": "integer",
        "minimum": 0
      },
      "PetId": {
        "description": "Unique identifier for pet in database",
        "example": 1,
        "title": "PetId",
        "type": "integer"
      },
      "CreatePetPayload": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the pet",
            "example": "Garfield",
            "title": "PetName",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "name"
        ]
      },
      "UpdatePetByIdPayload": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the pet",
            "example": "Garfield",
            "title": "PetName",
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    "requestBodies": {
      "CreatePetPayload": {
        "description": "Request payload: createPet",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreatePetPayload"
            }
          }
        }
      },
      "UpdatePetByIdPayload": {
        "description": "Request payload: updatePetById",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdatePetByIdPayload"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    }
  }
}